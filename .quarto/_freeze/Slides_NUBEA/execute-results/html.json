{
  "hash": "b84e1fa535ea70d13c741da8975af7b1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introdução ao R e Suas Funcionalidades\"\nauthor: \"Fernanda Kelly R. Silva | Estatística\"\nformat: \n  revealjs:\n    footer: \"Slides por [Fernanda Kelly](https://fernandakellyrs.com). Slides [on GitHub](https://github.com/FernandaKelly/IntroR_NUBEA).\"\n    slide-number: true\n    preview-links: true\n    chalkboard: true\n    code-annotations: hover\n    echo: true\neditor: visual\n---\n\n\n\n# Quem é a Fê?\n\n::: columns\n::: {.column width=\"60%\"}\nEu sou uma mulher preta com **coragem** e que fez (e ainda faz) uma boa limonada com os limões que a carreira na área da tecnologia oferece a todas minorias sociais.\n:::\n\n::: {.column width=\"40%\"}\n![](img/comunidade_alisson.png){.absolute bottom=\"0\" right=\"50\" width=\"300\" height=\"400\"}\n:::\n\n::: footer\nArte por [Allison Horst](https://mobile.twitter.com/allison_horst)\n:::\n:::\n\n# E faz o quê? \n\n\n## Vida (?) Acadêmica\n\n::: {.fragment}\n\n  - Graduada em Estatística pela Universidade Federal de Goiás (UFG);\n\n:::\n\n::: {.fragment}\n\n  - Especialista em Data Science e Analytics pela Universidade de São Paulo (USP);\n\n:::\n\n::: {.fragment}\n\n  - Especialista em Gerenciamento de Projetos pela Fundação Getúlio Vargas (FGV);\n    \n:::\n\n::: {.fragment}\n\n  - Mestranda em Sistemas Inteligentes e Suas Aplicações na área da Saúde pela Universidade Federal em Ciências da Saúde de Porto Alegre (UFCSPA);\n  \n:::\n\n# E sabe o que é o mais íncrivel de TUDO isso? \n\n::: {.fragment}\nÉ que caminho ao lado de grandes mulheres.\n:::\n\n\n#\n\nSou fundadora de um capítulo da organização mundial R-Ladies. Este capítulo é o [R-Ladies Goiânia](https://www.rladiesgyn.com/) e também faço parte do time global da organização [AI Inclusive](https://www.ai-inclusive.org/).\n\n::: {.column width=\"30%\"}\n![](img/rladiesgyn.png)\n:::\n\n::: {.column width=\"30%\"}\n![](img/ai_inclusive.jpeg)\n:::\n\n\n\n# E vocês?\n\n![](img/belive_allison.png)\n\n\n# Vamos começar...\n\n\n# Instalando o R (ou não?)\n\n::: callout-important\nAqui é importante dizer que o nome da linguagem é R e o nome da IDE (integrated development environment) é RStudio, ou seja, a IDE RStudio  é um ambiente de desenvolvimento que utilizamos para editar e executar os códigos em R. E claro, não existe somente a IDE RStudio que oferece a possibilidade de trabalhar com a linguagem R, há várias outras que também executam códigos em R, por exemplo: **Visual Studio Code (VSCode)**.\n:::\n\n\n## As opções...\n\nVocê tem duas opções para trabalhar com a IDE RStudio:\n\n\n# Posit Cloud\n\n::: {.fragment}\n\nOu antigo [RStudio Cloud](https://www.fernandakellyrs.com/post/rstudio-cloud)\n\n:::\n\n::: {.fragment}\n\n- Para acessar o [Posit Cloud](https://posit.cloud/) você pode fazer login com o gmail, GitHub ou qualquer outra conta que você tiver interesse em utilizar para o cadastro;\n\n:::\n\n::: {.fragment}\n\n- Você poderá utilizar o espaço referente a 25 projetos e 25 horas (por mês) de  computação. As horas de computação representam o uso da máquina virtual durante cada período para editar, executar, renderizar ou apresentar conteúdo.\n\n:::\n\n#\n\n- Por padrão, cada projeto recebe 1 GB de RAM e 1 CPU, além de um limite de execução em segundo plano de 1 hora.\n\n# Localmente\n::: {.fragment}\n\n   Ou seja, na sua máquina.\n   \n:::\n\n::: {.fragment}\n\n- No dia a dia, utilizar o R localmente é mais funcional e, para isso, você deve [instalar o R](https://posit.co/download/rstudio-desktop/);\n- Em relação a IDE RStudio você pode instalar [aqui](https://posit.co/download/rstudio-desktop/).\n\n:::\n\n# E porquê usar o R?\n\n#\n\n-   É uma linguagem de programação que possui muitas ferramentas para análise de dados, visualização de dados e tantas outras ferramentas;\n\n-   É código aberto (open source);\n\n-   Possui uma comunidade ativa de pessoas desenvolvedoras ([curso-r fórum](https://discourse.curso-r.com/));\n\n-   É flexível, permite desenvolver funções e pacotes para facilitar o trabalho;\n\n-   Está disponível, gratuitamente, em diferentes sistemas operacionais: Windows, Linux e Mac.\n\n#\n\n- Os pacotes R contêm **código**, **dados** e **documentação** em um formato de coleção padronizado que pode ser instalado pelos usuários do R, normalmente por meio de um repositório de software centralizado como o **CRAN (Comprehensive R Archive Network)**. \n- O grande número de pacotes disponíveis para o R e a facilidade de instalação e uso deles são citados como um fator importante que impulsiona a adoção generalizada da linguagem na ciência de dados.\n\n\n# \n\n::: {.fragment}\nMas, por onde começar?\n:::\n\n# O início de tudo...\n\n# ... são as boas práticas!\n\n#\n![](img/setwd_alisson.png)\n\n::: footer\nArte por [Allison Horst](https://mobile.twitter.com/allison_horst)\n:::\n\n\n# Porquê um projeto?\n\n#\n\nO ponto é: **vale mais a pena se esforçar para encontrar um par de meias no meio de uma gaveta bagunçada ou vale mais a pena se esforçar para arrumar uma gaveta bagunçada?**\n\n\n#\n\n![](img/problemas_allison.png)\n\n::: footer\nArte por [Allison Horst](https://mobile.twitter.com/allison_horst)\n:::\n\n\n\n# Step 1\n\n#\n\n::: {.fragment}\nEssa etapa do curso vai ser de muita troca e **live coding**. Vamos aprender as funcionalidades do R juntinhos e operantes, bora?\n:::\n\n# Operadores Aritméticos e Lógicos\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 2 #Soma\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 - 2 #Subtração\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 * 2 #Multiplicação\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n\n:::\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 / 2 #Divisão\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n:::\n\n#\n\n::: {.fragment}\n```r\n2+ 2 #<1>\n```\n1. Soma com MUITOOOO espaço\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 ^ 2    #Exponenciação\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 %% 3  #Resto da Divisão\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 %/% 3 #Parte inteira da Divisão\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\nA ordem matemática das operações também vale no R.\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2*8+10   \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 26\n```\n\n\n:::\n:::\n\n\n:::\n\n\n#\n\nOs operadores lógicos são **&**, **|** e **!**.\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nu <- 2 < 3 \nu\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- 5 > 3 \nv\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nu & v # E\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nu | v # OU\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n! v   # Negando\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n:::\n\n# Operadores Relacionais\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 > 3 #Maior que\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 >= 3 #Maior ou igual que\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 < 3 #Menor que\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 <= 3 #Menor ou igual que\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(2+2) == 4 #Igual\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(2+2) != 4 #Diferente\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(2+3) != 4 #Diferente\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n:::\n\n# Objetos e Operadores de Atribuição\n\nPara que o operador **<-** seja inscrito de forma automática, pressione **ALT + i**. Todos os atalhos estão [aqui](https://support.posit.co/hc/en-us/articles/200711853-Keyboard-Shortcuts-in-the-RStudio-IDE).\n\nAo se desenvolver um projeto, você irá trabalhar com diversos tipos de arquivos, além de informações que serão repetidas ao longo do script. \n\nPara reutilizar essas informações ao longo do script utilizamos o que chamamos de objeto. Um objeto retém e representa um valor, função ou base de dados\n\n#\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnome_evento <- \"r ladies gyn\" #Atribuição à esquerda\n```\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npessoas_evento = 300  #Atribuição à direita\n```\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(tudo_minusculo <- \"rladies gyn em minusculo\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"rladies gyn em minusculo\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(tudo_maiusculo <- \"RLADIES GYN EM MAIUSCULO\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"RLADIES GYN EM MAIUSCULO\"\n```\n\n\n:::\n:::\n\n\n:::\n\n## Boas práticas em objetos\n\n::: {.fragment}\nNão usar acentuação e espaços nos nomes de objetos.\n:::\n\n::: {.fragment}\nO R é case sensitive, isto é, faz a diferenciação entre as letras minúsculas e maiúsculas. Portanto, um objeto chamado teste é diferente de uma outro objeto chamada Teste.\n:::\n\n\n## Acessando objetos no R\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnome_evento\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"r ladies gyn\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(nome_evento)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"r ladies gyn\"\n```\n\n\n:::\n:::\n\n\n:::\n\n## Nomes de Objetos no R\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar_name <- 30\nvar_name\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n.var_name <- 30\n.var_name\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 30\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar name <- 30\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:1:5: unexpected symbol\n1: var name\n        ^\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar&name <- 30\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in var & name <- 30: não foi possível encontrar a função \"&<-\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor <- 30; if <- 30; while <- 30\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:1:5: unexpected assignment\n1: for <-\n        ^\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.notes}\nletters\nLETTERS\nmonth.name\nmonth.abb\npi\n:::\n\n# Classes de Objetos\n\nSão os tipos básicos de dados que podem ser representados na linguagem R. É neles que guardamos as informações que necessitamos para um algoritmo.\n\n- Integer: números inteiros\n- Double/Numeric: números racionais\n- Logical: tipos lógicos, TRUE ou FALSE\n- Character: texto (sempre entre aspas)\n- Factor: dados categóricos\n\n#\n\n::: {.notes}\n?base::class()\n?numeric()\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 2.5\nbase::class(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n:::\n\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- 10\nbase::class(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw <- 35L\nbase::class(w)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n:::\n\n#\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogico <- 1 < 2\nbase::class(logico)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnosso_char <- \"rladies Gyn\"\nbase::class(nosso_char)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <-  \"2019-03-01\"\nbase::class(\"2019-03-01\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nescola_categorias <- c(\"Fundamental\", \"Médio\", \"Superior\")\nbase::class(escola_categorias)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## Convertendo Classes de Objetos\n\nA função as.factor() cria um objeto do tipo factor, ou converte um objeto existente.\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nescola_categorias <- base::factor(c(\"Médio\", \"Fundamental\", \"Superior\"))\nescola_categorias\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Médio       Fundamental Superior   \nLevels: Fundamental Médio Superior\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::class(escola_categorias)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n\n:::\n\n#\n\nNa linha levels aparecem os rótulos do fator.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nescola_categorias <- base::factor(c(\"Médio\", \"Fundamental\", \"Superior\"), levels = c(\"Fundamental\", \"Médio\", \"Superior\"))\nescola_categorias\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] Médio       Fundamental Superior   \nLevels: Fundamental Médio Superior\n```\n\n\n:::\n:::\n\n\n\n\n#\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?character()\nnosso_char <- \"rladies Gyn\"\nbase::is.character(nosso_char)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnosso_char <- \"rladies Gyn\"\nbase::is.numeric(nosso_char)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogico <- 1 < 2\nbase::is.numeric(logico)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw <- 35L\nbase::is.character(w)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw <- 35L\nbase::as.character(w)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"35\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::as.integer(pi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlogico <- 1 < 2\nbase::is.integer(logico)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n:::\n\n\n#\n\nVamos brincar rapidinho com as classes dos seguintes objetos:\n\n```r\ncor_favorita <- \"rosa\" #<1>\nidade <- 27L           #<2>\naltura <- \"1.75\"       #<3>\npeso <- 61.1           #<4>\ngosta_brocolis <- TRUE #<5>\ngosta_carne <- \"FALSE\" #<6>\n```\n\n1. character\n2. integer\n3. character\n4. numeric\n5. logical\n6. character\n\n\n## Classe character\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::paste(\"Rladies\", \"Gyn\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Rladies Gyn\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::paste(\"Rladies\", \"Gyn\", sep = \"_\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Rladies_Gyn\"\n```\n\n\n:::\n:::\n\n\n:::\n\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::paste0(\"Rladies\", \"Gyn\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"RladiesGyn\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::gsub(pattern = \"Rladies\", replacement = \"We love\", x = \"Rladies Gyn\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"We love Gyn\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::substr(x = \"04/07/2020\", start = 1, stop = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"04\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::substr(x = \"04/07/2020\", \n       start = nchar(\"04/07/2020\") - 4, \n       stop = nchar(\"04/07/2020\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/2020\"\n```\n\n\n:::\n:::\n\n\n:::\n\n#\n\n\n![](img/stringr.png)\n\n::: footer\nArte por [Allison Horst](https://mobile.twitter.com/allison_horst)\n:::\n\n## Classe date\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- base::as.Date(\"2019-03-01\")\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2019-03-01\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::as.Date(\"10-26-2019\", format = \"%m-%d-%Y\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2019-10-26\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.notes}\nunclass(x)\nComo vocês fariam pra voltar a ter uma data?\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- base::as.Date(\"2016-03-01\")\ny <- base::as.Date(\"2016-02-28\")\nx-y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 2 days\n```\n\n\n:::\n:::\n\n\n:::\n\n#\n\nTempos no R são representados pelas classes POSIXct ou POSIXlt. POSIXct é útil quando se deseja armazenar tempos em data frames, por exemplo. POSIXlt é uma lista que armazena informações como o dia da semana, dia do ano, mês, dia do mês. Isso é útil quando precisamos deste tipo de informação.\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- base::Sys.time()\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2024-04-02 12:33:56 -03\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.notes}\nclass(x)\nComo transformar isso em data?\n:::\n\n#\n\n::: {.fragment}\nUm objeto da classe POSIXlt contém metadados úteis:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- base::as.POSIXlt(x)\nnames(unclass(y))[1:8]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sec\"  \"min\"  \"hour\" \"mday\" \"mon\"  \"year\" \"wday\" \"yday\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase::names(unclass(y))[9:11]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"isdst\"  \"zone\"   \"gmtoff\"\n```\n\n\n:::\n:::\n\n\n:::\n\n#\n\nSe **y** é um objeto, nós conseguimos acessar algumas informações através do **$**. Sendo assim, como conseguimos retornar o dia da semana do valor de y?\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny$\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:2:0: unexpected end of input\n1: y$\n   ^\n```\n\n\n:::\n:::\n\n\n:::\n\n#\n\nA parte complicada de trabalhar com datas...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- base::as.Date(\"2019-06-01\") # objeto da classe Date\ny <- base::strptime(\"9 Jun 2019 10:01:45\", \"%d %b %Y %H:%M:%S\") # objeto do tipo\n                                                          # POSIXlt\ny-x\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in y - x: argumento não-numérico para operador binário\n```\n\n\n:::\n:::\n\n\n\n::: {.fragment}\n**Não se deve realizar operações com uma mistura de objetos das classes Date, POSIXlt e POSIXct.**\n:::\n\n#\n\nComo podemos resolver isso?\n\n::: {.fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- base::as.POSIXlt(x)\ny-x\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 8.542882 days\n```\n\n\n:::\n:::\n\n\n:::\n\n#\n\n![](img/lubridate.png)\n\n::: footer\nArte por [Allison Horst](https://mobile.twitter.com/allison_horst)\n:::\n\n## Classe factor\n\n::: {.fragment}\nComo vimos, fatores são uma classe de objetos no R criada para representar as variáveis categóricas numericamente.\n:::\n\n::: {.fragment}\nEles são necessários pois muitas vezes precisamos representar variáveis categóricas como números. Quando estamos fazendo um gráfico, por exemplo, só podemos mapear variáveis numéricas em seus eixos, pois o plano cartesiano é formado por duas retas de números reais.\n:::\n\n#\n\nO que fazemos então quando plotamos uma variável categórica? Nós a transformamos em fatores.\n\n#\n\nMas como a manipulação de fatores é diferente da manipulação de números e strings (graças aos famosos levels), tarefas que parecem simples, como ordenar as barras de um gráfico de barras, acabam se tornando grandes desafios quando não sabemos lidar com essa classe de valores.\n\n\n![](img/forcats.png)\n\n::: footer\nArte por [Allison Horst](https://mobile.twitter.com/allison_horst)\n:::\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "Slides_NUBEA_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}