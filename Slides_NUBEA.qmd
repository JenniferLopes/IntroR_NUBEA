---
title: "Introdução ao R e Suas Funcionalidades"
author: "Fernanda Kelly R. Silva | Estatística"
format: 
  revealjs:
    footer: "Slides por [Fernanda Kelly](https://fernandakellyrs.com). Slides [on GitHub](https://github.com/FernandaKelly/IntroR_NUBEA)."
    slide-number: true
    preview-links: true
    chalkboard: true
    code-annotations: hover
    echo: true
editor: visual
---

# Quem é a Fê?

::: columns
::: {.column width="60%"}
Eu sou uma mulher preta com **coragem** e que fez (e ainda faz) uma boa limonada com os limões que a carreira na área da tecnologia oferece a todas minorias sociais.
:::

::: {.column width="40%"}
![](img/comunidade_alisson.png){.absolute bottom="0" right="50" width="300" height="400"}
:::

::: footer
Arte por [Allison Horst](https://mobile.twitter.com/allison_horst)
:::
:::

# E faz o quê?

## Vida (??) Acadêmica

::: fragment
-   Graduada em Estatística pela Universidade Federal de Goiás (UFG);
:::

::: fragment
-   Especialista em Data Science e Analytics pela Universidade de São Paulo (USP);
:::

::: fragment
-   Especialista em Gerenciamento de Projetos pela Fundação Getúlio Vargas (FGV);
:::

::: fragment
-   Mestranda em Sistemas Inteligentes e Suas Aplicações na área da Saúde pela Universidade Federal em Ciências da Saúde de Porto Alegre (UFCSPA);
:::

# E sabe o que é o mais íncrivel de TUDO isso?

::: fragment
É que caminho ao lado de grandes mulheres.
:::

# 

Sou fundadora de um capítulo da organização mundial R-Ladies. Este capítulo é o [R-Ladies Goiânia](https://www.rladiesgyn.com/) e também faço parte do time global da organização [AI Inclusive](https://www.ai-inclusive.org/).

::: {.column width="30%"}
![](img/rladiesgyn.png)
:::

::: {.column width="30%"}
![](img/ai_inclusive.jpeg)
:::

# E vocês?

![](img/belive_allison.png)

# Vamos começar...

# Instalando o R (ou não?)

::: callout-important
Aqui é importante dizer que o nome da linguagem é R e o nome da IDE (integrated development environment) é RStudio, ou seja, a IDE RStudio é um ambiente de desenvolvimento que utilizamos para editar e executar os códigos em R. E claro, não existe somente a IDE RStudio que oferece a possibilidade de trabalhar com a linguagem R, há várias outras que também executam códigos em R, por exemplo: **Visual Studio Code (VSCode)**.
:::

## As opções...

Você tem duas opções para trabalhar com a IDE RStudio:

# Posit Cloud

::: fragment
Ou antigo [RStudio Cloud](https://www.fernandakellyrs.com/post/rstudio-cloud)
:::

::: fragment
-   Para acessar o [Posit Cloud](https://posit.cloud/) você pode fazer login com o gmail, GitHub ou qualquer outra conta que você tiver interesse em utilizar para o cadastro;
:::

::: fragment
-   Você poderá utilizar o espaço referente a 25 projetos e 25 horas (por mês) de computação. As horas de computação representam o uso da máquina virtual durante cada período para editar, executar, renderizar ou apresentar conteúdo.
:::

# 

-   Por padrão, cada projeto recebe 1 GB de RAM e 1 CPU, além de um limite de execução em segundo plano de 1 hora.

# Localmente

::: fragment
Ou seja, na sua máquina.
:::

::: fragment
-   No dia a dia, utilizar o R localmente é mais funcional e, para isso, você deve [instalar o R](https://posit.co/download/rstudio-desktop/);
-   Em relação a IDE RStudio você pode instalar [aqui](https://posit.co/download/rstudio-desktop/).
:::

# E porquê usar o R?

# 

-   É uma linguagem de programação que possui muitas ferramentas para análise de dados, visualização de dados e tantas outras ferramentas;

-   É código aberto (open source);

-   Possui uma comunidade ativa de pessoas desenvolvedoras ([curso-r fórum](https://discourse.curso-r.com/));

-   É flexível, permite desenvolver funções e pacotes para facilitar o trabalho;

-   Está disponível, gratuitamente, em diferentes sistemas operacionais: Windows, Linux e Mac.

# 

-   Os pacotes R contêm **código**, **dados** e **documentação** em um formato de coleção padronizado que pode ser instalado pelos usuários do R, normalmente por meio de um repositório de software centralizado como o **CRAN (Comprehensive R Archive Network)**.
-   O grande número de pacotes disponíveis para o R e a facilidade de instalação e uso deles são citados como um fator importante que impulsiona a adoção generalizada da linguagem na ciência de dados.

# 

::: fragment
Mas, por onde começar?
:::

# O início de tudo...

# ... são as boas práticas!

# 

![](img/setwd_alisson.png)

::: footer
Arte por [Allison Horst](https://mobile.twitter.com/allison_horst)
:::

# Porquê um projeto?

# 

O ponto é: **vale mais a pena se esforçar para encontrar um par de meias no meio de uma gaveta bagunçada ou vale mais a pena se esforçar para arrumar uma gaveta bagunçada?**

# 

![](img/problemas_allison.png)

::: footer
Arte por [Allison Horst](https://mobile.twitter.com/allison_horst)
:::

# Step 1

# 

::: fragment
Essa etapa do curso vai ser de muita troca e **live coding**. Vamos aprender as funcionalidades do R juntinhos e operantes, bora?
:::

# Operadores Aritméticos e Lógicos

::: fragment
```{r}
2 + 2 #Soma
```
:::

::: fragment
```{r}
2 - 2 #Subtração
```
:::

::: fragment
```{r}
2 * 2 #Multiplicação
```
:::

::: fragment
```{r}
2 / 2 #Divisão
```
:::

# 

::: fragment
``` r
2+ 2 #<1>
```

1.  Soma com MUITOOOO espaço
:::

::: fragment
```{r}
2 ^ 2    #Exponenciação
```
:::

::: fragment
```{r}
10 %% 3  #Resto da Divisão
```
:::

::: fragment
```{r}
10 %/% 3 #Parte inteira da Divisão
```
:::

::: fragment
A ordem matemática das operações também vale no R.
:::

::: fragment
```{r}
2*8+10   
```
:::

# 

Os operadores lógicos são **&**, **\|** e **!**.

::: fragment
```{r}
u <- 2 < 3 
u
```
:::

::: fragment
```{r}
v <- 5 > 3 
v
```
:::

::: fragment
```{r}
u & v # E
u | v # OU
! v   # Negando
```
:::

# Operadores Relacionais

::: fragment
```{r}
10 > 3 #Maior que
```
:::

::: fragment
```{r}
10 >= 3 #Maior ou igual que
```
:::

::: fragment
```{r}
10 < 3 #Menor que
```
:::

::: fragment
```{r}
10 <= 3 #Menor ou igual que
```
:::

::: fragment
```{r}
(2+2) == 4 #Igual
```
:::

::: fragment
```{r}
(2+2) != 4 #Diferente
```
:::

::: fragment
```{r}
(2+3) != 4 #Diferente
```
:::

# Objetos e Operadores de Atribuição

Para que o operador **\<-** seja inscrito de forma automática, pressione **ALT + i**. Todos os atalhos estão [aqui](https://support.posit.co/hc/en-us/articles/200711853-Keyboard-Shortcuts-in-the-RStudio-IDE).

Ao se desenvolver um projeto, você irá trabalhar com diversos tipos de arquivos, além de informações que serão repetidas ao longo do script.

Para reutilizar essas informações ao longo do script utilizamos o que chamamos de objeto. Um objeto retém e representa um valor, função ou base de dados

# 

::: fragment
```{r}
#| echo: true
nome_evento <- "r ladies gyn" #Atribuição à esquerda

```
:::

::: fragment
```{r}
#| echo: true
pessoas_evento = 300  #Atribuição à direita
```
:::

::: fragment
```{r}
#| echo: true
(tudo_minusculo <- "rladies gyn em minusculo")
```
:::

::: fragment
```{r}
#| echo: true
(tudo_maiusculo <- "RLADIES GYN EM MAIUSCULO")
```
:::

## Boas práticas em objetos

::: fragment
Não usar acentuação e espaços nos nomes de objetos.
:::

::: fragment
O R é case sensitive, isto é, faz a diferenciação entre as letras minúsculas e maiúsculas. Portanto, um objeto chamado teste é diferente de uma outro objeto chamada Teste.
:::

## Acessando objetos no R

::: fragment
```{r}
nome_evento
```
:::

::: fragment
```{r}
print(nome_evento)
```
:::

## Nomes de Objetos no R

::: fragment
```{r}
#| echo: true
var_name <- 30
var_name
```
:::

::: fragment
```{r}
#| echo: true
.var_name <- 30
.var_name
```
:::

::: fragment
```{r}
#| echo: true
#| error: true
var name <- 30
```
:::

::: fragment
```{r}
#| echo: true
#| error: true
var&name <- 30
```
:::

::: fragment
```{r}
#| echo: true
#| error: true
for <- 30; if <- 30; while <- 30
```
:::

::: notes
letters LETTERS month.name month.abb pi
:::

# Classes de Objetos

São os tipos básicos de dados que podem ser representados na linguagem R. É neles que guardamos as informações que necessitamos para um algoritmo.

-   Integer: números inteiros
-   Double/Numeric: números racionais
-   Logical: tipos lógicos, TRUE ou FALSE
-   Character: texto (sempre entre aspas)
-   Factor: dados categóricos

# 

::: notes
?base::class() ?numeric()
:::

::: fragment
```{r}
#| echo: true
x <- 2.5
base::class(x)
```
:::

::: fragment
```{r}
#| echo: true
y <- 10
base::class(y)
```
:::

::: fragment
```{r}
#| echo: true
w <- 35L
base::class(w)
```
:::

# 

::: fragment
```{r}
#| echo: true
logico <- 1 < 2
base::class(logico)
```
:::

::: fragment
```{r}
#| echo: true
nosso_char <- "rladies Gyn"
base::class(nosso_char)
```
:::

::: fragment
```{r}
#| echo: true
x <-  "2019-03-01"
base::class("2019-03-01")
```
:::

::: fragment
```{r}
#| echo: true
escola_categorias <- c("Fundamental", "Médio", "Superior")
base::class(escola_categorias)
```
:::

## Convertendo Classes de Objetos

A função as.factor() cria um objeto do tipo factor, ou converte um objeto existente.

::: fragment
```{r}
#| echo: true
escola_categorias <- base::factor(c("Médio", "Fundamental", "Superior"))
escola_categorias
```
:::

::: fragment
```{r}
base::class(escola_categorias)
```
:::

# 

Na linha levels aparecem os rótulos do fator.

```{r}
#| echo: true
escola_categorias <- base::factor(c("Médio", "Fundamental", "Superior"), levels = c("Fundamental", "Médio", "Superior"))
escola_categorias
```

# 

::: fragment
```{r}
#| echo: true
?character()
nosso_char <- "rladies Gyn"
base::is.character(nosso_char)
```
:::

::: fragment
```{r}
nosso_char <- "rladies Gyn"
base::is.numeric(nosso_char)
```
:::

::: fragment
```{r}
logico <- 1 < 2
base::is.numeric(logico)
```
:::

::: fragment
```{r}
#| echo: true
w <- 35L
base::is.character(w)
```
:::

::: fragment
```{r}
#| echo: true
w <- 35L
base::as.character(w)
```
:::

::: fragment
```{r}
#| echo: true
base::as.integer(pi)
```
:::

::: fragment
```{r}
#| echo: true
logico <- 1 < 2
base::is.integer(logico)
```
:::

# 

Vamos brincar rapidinho com as classes dos seguintes objetos:

``` r
cor_favorita <- "rosa" #<1>
idade <- 27L           #<2>
altura <- "1.75"       #<3>
peso <- 61.1           #<4>
gosta_brocolis <- TRUE #<5>
gosta_carne <- "FALSE" #<6>
```

1.  character
2.  integer
3.  character
4.  numeric
5.  logical
6.  character

## Classe character

::: fragment
```{r}
#| echo: true
base::paste("Rladies", "Gyn")
```
:::

::: fragment
```{r}
#| echo: true
base::paste("Rladies", "Gyn", sep = "_")
```
:::

::: fragment
```{r}
#| echo: true
base::paste0("Rladies", "Gyn")
```
:::

::: fragment
```{r}
#| echo: true
base::gsub(pattern = "Rladies", replacement = "We love", x = "Rladies Gyn")
```
:::

::: fragment
```{r}
#| echo: true
base::substr(x = "04/07/2020", start = 1, stop = 2)
```
:::

::: fragment
```{r}
#| echo: true
base::substr(x = "04/07/2020", 
       start = nchar("04/07/2020") - 4, 
       stop = nchar("04/07/2020"))
```
:::

# 

![](img/stringr.png)

::: footer
Arte por [Allison Horst](https://mobile.twitter.com/allison_horst)
:::

## Classe date

::: fragment
```{r}
#| echo: true
x <- base::as.Date("2019-03-01")
x
```
:::

::: fragment
```{r}
#| echo: true
base::as.Date("10-26-2019", format = "%m-%d-%Y")
```
:::

::: notes
unclass(x) Como vocês fariam pra voltar a ter uma data?
:::

::: fragment
```{r}
x <- base::as.Date("2016-03-01")
y <- base::as.Date("2016-02-28")
x-y
```
:::

# 

Tempos no R são representados pelas classes POSIXct ou POSIXlt. POSIXct é útil quando se deseja armazenar tempos em data frames, por exemplo. POSIXlt é uma lista que armazena informações como o dia da semana, dia do ano, mês, dia do mês. Isso é útil quando precisamos deste tipo de informação.

::: fragment
```{r}
x <- base::Sys.time()
x
```
:::

::: notes
class(x) Como transformar isso em data?
:::

# 

::: fragment
Um objeto da classe POSIXlt contém metadados úteis:

```{r}
y <- base::as.POSIXlt(x)
names(unclass(y))[1:8]
```
:::

::: fragment
```{r}
base::names(unclass(y))[9:11]
```
:::

# 

Se **y** é um objeto, nós conseguimos acessar algumas informações através do **\$**. Sendo assim, como conseguimos retornar o dia da semana do valor de y?

::: fragment
```{r}
#| error: true
y$
```
:::

# 

A parte complicada de trabalhar com datas...

```{r}
#| error: true
x <- base::as.Date("2019-06-01") # objeto da classe Date
y <- base::strptime("9 Jun 2019 10:01:45", "%d %b %Y %H:%M:%S") # objeto do tipo
                                                          # POSIXlt
y-x
```

::: fragment
**Não se deve realizar operações com uma mistura de objetos das classes Date, POSIXlt e POSIXct.**
:::

# 

Como podemos resolver isso?

::: fragment
```{r}
x <- base::as.POSIXlt(x)
y-x
```
:::

# 

![](img/lubridate.png)

::: footer
Arte por [Allison Horst](https://mobile.twitter.com/allison_horst)
:::

## Classe factor

::: fragment
Como vimos, fatores são uma classe de objetos no R criada para representar as variáveis categóricas numericamente.
:::

::: fragment
Eles são necessários pois muitas vezes precisamos representar variáveis categóricas como números. Quando estamos fazendo um gráfico, por exemplo, só podemos mapear variáveis numéricas em seus eixos, pois o plano cartesiano é formado por duas retas de números reais.
:::

# 

O que fazemos então quando plotamos uma variável categórica? Nós a transformamos em fatores.

# 

Mas como a manipulação de fatores é diferente da manipulação de números e strings (graças aos famosos levels), tarefas que parecem simples, como ordenar as barras de um gráfico de barras, acabam se tornando grandes desafios quando não sabemos lidar com essa classe de valores.

![](img/forcats.png)

::: footer
Arte por [Allison Horst](https://mobile.twitter.com/allison_horst)
:::

# Step 2

# Para além do que aprendemos...

# ... vamos focar em data frame?

# O que é um Data frame?

# 

Data frame é, provavelmente, o tipo de dado complexo mais utilizado em R. É nele que você armazena conjuntos de dados estruturados em linhas e colunas. Um data frame possui colunas nomeadas, sendo que todas as colunas possuem a mesma quantidade de linhas. Imagine o dataframe como uma tabela.

# 

![](img/data_alisson.jpg)

::: footer
Arte por [Allison Horst](https://mobile.twitter.com/allison_horst)
:::

# Base de dados

É importante dizer que há várias formas da gente conseguir encontrar bases de dados são várias, inclusive por meio de pacotes. Te convido a conhecer o pacote [**basedosdados**](https://basedosdados.org/) e desbravar as várias bases de dados disponíveis, mas hoje, nós vamos utilizar o banco de dados **iris** que é do pacote **datasets**.

```{r}
#| warning: false
#| message: false

library(datasets)
dados_iris <- datasets::iris 
```

# 

```{r}
#install.packages("DT")
library(DT)

dados_iris %>% 
  DT::datatable()
#head(dados_iris, 5)
```

## Summary

A função **summary** que é do pacote **base** nos fornece informações básicas e necessárias para que possamos levantar algumas hipóteses em relação a grupos e suas características.

```{r}
base::summary(dados_iris)
```

## Visualização de dados

Outra forma de levantamento de hipóteses é através da visualização de dados e, um pacote **sensacional** para iniciantes é o pacote **esquisse**.

```{r}
#| warning: false
#| message: false
#install.packages("esquisse")
library(esquisse)
```

# 

Prontes para essa belezura?

# Teste de Hipóteses

A parte final de uma análise estatı́stica, o teste de hipotese (T.H.), se dá pela tomada de decisão relativa a um problema de interesse, digamos, verificar se há associação entre um fator (adubo) e o tamanho de uma planta (mangueira) na experimentação agronômica.

# 

-   Na prática experimental é comum o surgimento de situações em que não se tem o conhecimento da distribuição dos dados, ou mesmo que o tenha, os mesmos podem não ter a distribuição normal. A alta dispersão ou até mesmo assimetria, ou ambos, fazem com que o trato com os dados seja dificultado.

-   **Muitos casos destes existem técnicas de transformações nos dados que produzem novos dados cuja distribuição se aproxime da normal**. Caso isto não seja possı́vel as técnicas não-paramétricas são uma alternativa para análise estatı́stica.

# 

-   Um teste **não-paramétrico** é aquele cujo modelo não especifica condições sobre os parâmetros da população da qual a amostra foi obtida.

![](img/normal_allison.png)

::: footer
Arte por [Allison Horst](https://mobile.twitter.com/allison_horst)
:::

# 

Ficou entendido que há métodos paramétricos e não paramétricos?

# Paramétricos

Há três principais tipos de testes t: o teste t para uma amostra, o teste t para duas amostras independentes (ou apenas teste t independente) e o teste t para duas amostras pareadas (ou teste t pareado). O teste t é um teste que verifica se há **diferença média** entre as amostras.

::: fragment
E se você tiver mais de duas amostras ou grupos?
:::

# 

A resposta mais inocente seria realizar múltiplos testes t entre os diversos grupos e comparar o tamanho de efeito e p-valor dos testes. Porém essa abordagem possui uma falha: conforme aumenta o número de testes a taxa de falsos positivos (erros tipo I) aumentam quase na mesma proporção.

![](img/hipoteses_allison.png)

::: footer
Arte por [Allison Horst](https://mobile.twitter.com/allison_horst)
:::

# 

Para comparação entre mais de duas amostras ou grupos, temos um conjunto de técnicas chamada análise de variância, conhecida como **Analysis of Variance (ANOVA)**.

A ANOVA controla esses erros para que os falsos positivos (erros tipo I) permaneçam em 5% na comparação de média entre dois ou mais grupos. **A ANOVA não irá dizer com precisão como que as médias dos grupos diferem**, mas o seu resultado indica fortes evidências de que a diferença entre as médias dos grupos difere. Sua hipótese nula é que não há diferença entre as médias dos grupos.

<!-- A ANOVA tradicional é uma técnica paramétrica (quando a variável dependente é distribuída conforme uma distribuição Normal), mas há também uma versão não-paramétrica (quando não temos pressupostos sobre de que distribuição probabilística a variável dependente é distribuída) chamada teste de Kruskal-Wallis. -->

<!-- Após analisar os resultados de uma ANOVA, é muito comum realizar uma comparação post-hoc usando um conjunto de técnicas comparativas de média entre grupos que controlam a taxa de erro familiar. A principal técnica paramétrica é o teste de Tukey e a principal técnica não-paramétrica é o teste de Dunn. -->

# Vamos de exemplo?

# 

Nós vimos que há uma suposição entre a média do tamanho da Sepal.Length de cada Species do banco de dados **iris**. Sendo assim, vamos levantar uma hipótese entre as Species setosa e virginica.

::: fragment
E se você não sabe, há passos **obrigatórios** para a construção de um teste de hipótese. Vamos ver como é que funciona?
:::

# 

::: fragment
1. Enunciar as Hipóteses: Por exemplo:

-   $H_{0}$ : Não há diferença médias entre os grupos A e B;
-   $H_{1}$ : Há diferença média entre os grupos A e B;

:::

::: fragment
2. Fixar o nı́vel de significância $\alpha$ do teste:

 $\alpha$ : Erro tipo I: Rejeitar $H_{0}$ quando é verdadeira.
:::

::: fragment
3. Escolha da Estatı́stica teste adequada:

A Estatística de teste vai depender da característica dos seus dados, mas no nosso caso, vamos utilizar o teste t independente.

:::

#

::: fragment
4.  Obtenção dos valores crı́ticos e Obtenção da Estatı́stica calculada:

Encontramos esses valores na saída do teste.

:::

::: fragment
5.  Conclusão e tomada de decisão.
:::

## Pressupostos

- Normalidade: verificamos a normalidade da variável dependente de cada grupo;
- Homogeneidade de variâncias (ou seja, grupos com variâncias homogêneas).


# Não paramétricos