---
title: "Introdução ao R e Suas Funcionalidades"
author: "Fernanda Kelly R. Silva | Estatística"
format: 
  revealjs:
    footer: "Slides por [Fernanda Kelly](https://fernandakellyrs.com). Slides [on GitHub](https://github.com/FernandaKelly/IntroR_NUBEA)."
    slide-number: true
    preview-links: true
    chalkboard: true
    code-annotations: hover
    echo: true
editor: visual
---

# Quem é a Fê?

::: columns
::: {.column width="60%"}
Eu sou uma mulher preta com **coragem** e que fez (e ainda faz) uma boa limonada com os limões que a carreira na área da tecnologia oferece a todas minorias sociais.
:::

::: {.column width="40%"}
![](img/comunidade_alisson.png){.absolute bottom="0" right="50" width="300" height="400"}
:::

::: footer
Arte por [Allison Horst](https://mobile.twitter.com/allison_horst)
:::
:::

# E faz o quê? 


## Vida (?) Acadêmica

::: {.fragment}

  - Graduada em Estatística pela Universidade Federal de Goiás (UFG);

:::

::: {.fragment}

  - Especialista em Data Science e Analytics pela Universidade de São Paulo (USP);

:::

::: {.fragment}

  - Especialista em Gerenciamento de Projetos pela Fundação Getúlio Vargas (FGV);
    
:::

::: {.fragment}

  - Mestranda em Sistemas Inteligentes e Suas Aplicações na área da Saúde pela Universidade Federal em Ciências da Saúde de Porto Alegre (UFCSPA);
  
:::



# E vocês?

![](img/belive_allison.png)


# Vamos começar...


# Instalando o R (ou não?)

::: callout-important
Aqui é importante dizer que o nome da linguagem é R e o nome da IDE (integrated development environment) é RStudio, ou seja, a IDE RStudio  é um ambiente de desenvolvimento que utilizamos para editar e executar os códigos em R. E claro, não existe somente a IDE RStudio que oferece a possibilidade de trabalhar com a linguagem R, há várias outras que também executam códigos em R, por exemplo: **Visual Studio Code (VSCode)**.
:::


## As opções...

Você tem duas opções para trabalhar com a IDE RStudio:


# Posit Cloud

::: {.fragment}

Ou antigo [RStudio Cloud](https://www.fernandakellyrs.com/post/rstudio-cloud)

:::

::: {.fragment}

- Para acessar o [Posit Cloud](https://posit.cloud/) você pode fazer login com o gmail, GitHub ou qualquer outra conta que você tiver interesse em utilizar para o cadastro;

:::

::: {.fragment}

- Você poderá utilizar o espaço referente a 25 projetos e 25 horas (por mês) de  computação. As horas de computação representam o uso da máquina virtual durante cada período para editar, executar, renderizar ou apresentar conteúdo.

:::

#

- Por padrão, cada projeto recebe 1 GB de RAM e 1 CPU, além de um limite de execução em segundo plano de 1 hora.

# Localmente
::: {.fragment}

   Ou seja, na sua máquina.
   
:::

::: {.fragment}

- No dia a dia, utilizar o R localmente é mais funcional e, para isso, você deve [instalar o R](https://posit.co/download/rstudio-desktop/);
- Em relação a IDE RStudio você pode instalar [aqui](https://posit.co/download/rstudio-desktop/).

:::

# E porquê usar o R?

#

-   É uma linguagem de programação que possui muitas ferramentas para análise de dados, visualização de dados e tantas outras ferramentas;

-   É código aberto (open source);

-   Possui uma comunidade ativa de pessoas desenvolvedoras ([curso-r fórum](https://discourse.curso-r.com/));

-   É flexível, permite desenvolver funções e pacotes para facilitar o trabalho;

-   Está disponível, gratuitamente, em diferentes sistemas operacionais: Windows, Linux e Mac.

#

- Os pacotes R contêm **código**, **dados** e **documentação** em um formato de coleção padronizado que pode ser instalado pelos usuários do R, normalmente por meio de um repositório de software centralizado como o **CRAN (Comprehensive R Archive Network)**. 
- O grande número de pacotes disponíveis para o R e a facilidade de instalação e uso deles são citados como um fator importante que impulsiona a adoção generalizada da linguagem na ciência de dados.


# 

::: {.fragment}
Mas, por onde começar?
:::

# O início de tudo...

# ... são as boas práticas!

#
![](img/setwd_alisson.png)

::: footer
Arte por [Allison Horst](https://mobile.twitter.com/allison_horst)
:::


# Porquê um projeto?

#

O ponto é: **vale mais a pena se esforçar para encontrar um par de meias no meio de uma gaveta bagunçada ou vale mais a pena se esforçar para arrumar uma gaveta bagunçada?**


#

![](img/problemas_allison.png)

::: footer
Arte por [Allison Horst](https://mobile.twitter.com/allison_horst)
:::



# Step 1

#

::: {.fragment}
Essa etapa do curso vai ser de muita troca e **live coding**. Vamos aprender as funcionalidades do R juntinhos e operantes, bora?
:::

# Operadores Aritméticos e Lógicos

::: {.fragment}

```{r}
2 + 2 #Soma
```

:::

::: {.fragment}

```{r}
2 - 2 #Subtraçãoo
```

:::

::: {.fragment}
```{r}
2 * 2 #Multiplicação
```

:::
::: {.fragment}

```{r}
2 / 2 #Divisão
```
:::

::: {.fragment}
```r
2+ 2 #<1>
```
1. Soma com MUITOOOO espaço
:::
::: {.fragment}
```{r}
2 ^ 2    #Exponenciação
```
:::

#

::: {.fragment}
```{r}
10 %% 3  #Resto da Divisão
```
:::

::: {.fragment}
```{r}
10 %/% 3 #Parte inteira da Divisão
```
:::

::: {.fragment}
```{r}
u <- 2 < 3 
v <- 2 > 3 
```
:::

::: {.fragment}
```{r}
u <- 2 < 3 
v <- 5 > 3 
```
:::


::: {.fragment}
```{r}
u & v # E
u | v # OU
! v   # Negando
```
:::


# Operadores Relacionais

::: {.fragment}
```{r}
10 > 3 #Maior que
```
:::

::: {.fragment}
```{r}
10 >= 3 #Maior ou igual que
```
:::

::: {.fragment}
```{r}
10 < 3 #Menor que
```
:::

::: {.fragment}
```{r}
10 <= 3 #Menor ou igual que
```
:::

::: {.fragment}
```{r}
(2+2) == 4 #Igual
```
:::

::: {.fragment}
```{r}
(2+2) != 4 #Diferente
```
:::

::: {.fragment}
```{r}
(2+3) != 4 #Diferente
```
:::

# Objetos e Operadores de Atribuição

::: {.fragment}
```{r}
#| echo: true
nome_evento <- "r ladies gyn" #Atribuição à esquerda

```
:::

::: {.fragment}
```{r}
#| echo: true
pessoas_evento = 300  #Atribuição à direita
```
:::

::: {.fragment}
```{r}
#| echo: true
(tudo_minusculo <- "rladies gyn em minusculo")
```
:::

::: {.fragment}
```{r}
#| echo: true
(tudo_maiusculo <- "RLADIES GYN EM MAIUSCULO")
```
:::

## Acessando objetos no R

::: {.fragment}
```{r}
nome_evento
```
:::

::: {.fragment}
```{r}
print(nome_evento)
```
:::

## Nomes de Objetos no R

::: {.fragment}
```{r}
#| echo: true
var_name <- 30
var_name
```
:::

::: {.fragment}
```{r}
#| echo: true
.var_name <- 30
.var_name
```
:::

::: {.fragment}
```{r}
#| echo: true
#| error: true
var name <- 30
```
:::

::: {.fragment}
```{r}
#| echo: true
#| error: true
var&name <- 30
```
:::

::: {.fragment}
```{r}
#| echo: true
#| error: true
for <- 30; if <- 30; while <- 30
```
:::

::: {.notes}
letters
LETTERS
month.name
month.abb
pi
:::

# Classes de Objetos

::: {.notes}
?base::class()
?numeric()
:::

::: {.fragment}
```{r}
#| echo: true
x <- 2.5
class(x)
```
:::


::: {.fragment}
```{r}
#| echo: true
y <- 10
class(y)
```
:::

::: {.fragment}
```{r}
#| echo: true
?integer()
w <- 35L
class(w)
```
:::

#

::: {.fragment}

```{r}
#| echo: true
?logical()
logico <- 1 < 2
class(logico)
```

:::

::: {.fragment}

```{r}
#| echo: true
nosso_char <- "rladies Gyn"
class(nosso_char)
```

:::

::: {.fragment}

```{r}
#| echo: true
x <-  "2019-03-01"
class("2019-03-01")
```

:::


## Convertendo Classes de Objetos

::: {.fragment}

```{r}
#| echo: true
?character()
is.character(nosso_char)
```

:::

::: {.fragment}

```{r}
is.numeric(nosso_char)
```

:::

::: {.fragment}

```{r}
is.numeric(logico)
```
:::

::: {.fragment}
```{r}
#| echo: true
is.character(w)
```
:::

::: {.fragment}
```{r}
#| echo: true
as.character(w)
```
:::

::: {.fragment}

```{r}
#| echo: true
as.integer(pi)
```
:::

::: {.fragment}

```{r}
#| echo: true
is.integer(logico)
```
:::

## Classe character

::: {.fragment}
```{r}
#| echo: true
base::paste("Rladies", "Gyn")
base::paste("Rladies", "Gyn", sep = "_")
base::paste0("Rladies", "Gyn")
```
:::

::: {.fragment}
```{r}
#| echo: true
base::gsub(pattern = "Rladies", replacement = "We love", x = "Rladies Gyn")
```
:::

::: {.fragment}
```{r}
#| echo: true
base::substr(x = "04/07/2020", start = 1, stop = 2)
```
:::

::: {.fragment}
```{r}
#| echo: true
base::substr(x = "04/07/2020", 
       start = nchar("04/07/2020") - 4, 
       stop = nchar("04/07/2020"))
```
:::

## Classe date

::: {.fragment}
```{r}
#| echo: true
x <- base::as.Date("2019-03-01")
x
```
:::

::: {.fragment}
```{r}
#| echo: true
base::as.Date("10-26-2019", format = "%m-%d-%Y")
```
:::

::: {.notes}
unclass(x)
Como vocês fariam pra voltar a ter uma data?
:::

::: {.fragment}
```{r}
x <- base::as.Date("2016-03-01")
y <- base::as.Date("2016-02-28")
x-y
```
:::

#

Tempos no R são representados pelas classes POSIXct ou POSIXlt. POSIXct é útil quando se deseja armazenar tempos em data frames, por exemplo. POSIXlt é uma lista que armazena informações como o dia da semana, dia do ano, mês, dia do mês. Isso é útil quando precisamos deste tipo de informação.

::: {.fragment}
```{r}
x <- Sys.time()
x
```
:::

::: {.notes}
class(x)
Como transformar isso em data?
:::

Um objeto da classe POSIXlt contém metadados úteis:

::: {.fragment}
```{r}
y <- as.POSIXlt(x)
names(unclass(y))[1:8]
```
:::

::: {.fragment}
```{r}
names(unclass(y))[9:11]
```
:::

#

Se **y** é um objeto, nós conseguimos acessar algumas informações através do **$**. Sendo assim, como conseguimos retornar o dia da semana do valor de y?

::: {.fragment}
```{r}
#| error: true
y$
```
:::

#

A parte complicada de trabalhar com datas...

```{r}
#| error: true
x <- as.Date("2019-06-01") # objeto da classe Date
y <- strptime("9 Jun 2019 10:01:45", "%d %b %Y %H:%M:%S") # objeto do tipo
                                                          # POSIXlt
y-x
```

::: {.fragment}
**Não se deve realizar operações com uma mistura de objetos das classes Date, POSIXlt e POSIXct.**
:::

#

Como podemos resolver isso?

::: {.fragment}
```{r}
x <- as.POSIXlt(x)
y-x
```
:::


